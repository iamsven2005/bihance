generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model user {
  clerkId       String            @id @default(cuid())
  first_name    String?
  last_name     String?
  image_url     String?
  email         String?           @unique
  events        event[]           @relation("UserEvents")
  subscriptions userSubcription[]
  payrolls      payroll[]
  attendances   attendance[]
  credits       Int               @default(0)
  board         String?
}

model event {
  eventid     String       @id @default(cuid())
  managerId   String
  location    String
  image       String
  description String
  name        String
  files       files[]
  users       user[]       @relation("UserEvents")
  attendances attendance[]
  payrolls    payroll[]
  orgId String?
}

model userSubcription {
  id                   String   @id @default(cuid())
  user_id              String   @unique
  stripeCustomerId     String   @unique
  stripeSubscriptionId String   @unique
  stripePriceId        String   @unique
  stripeEnd            DateTime @unique
  user                 user     @relation(fields: [user_id], references: [clerkId], onDelete: Cascade)
}

model payroll {
  payrollid String    @id @default(cuid())
  userId    String
  eventid   String
  rolltype  String // manager, custom, teamlead
  user      user      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  event     event     @relation(fields: [eventid], references: [eventid], onDelete: Cascade)
  typepay   typepay[]

  @@index([eventid])
  @@index([userId])
}

model typepayTemplate {
  id        String   @id @default(cuid())
  name      String   // Name of the template
  day       String   // weekday or weekend
  shift     String   // hr, min, day, location, shift
  pay       Int      // The pay amount
  typepays  typepay[] @relation("TemplateTypePays")

  @@index([name])
}

model typepay {
  typeid          String         @id @default(cuid())
  payrollId       String
  templateId      String?        // Optional reference to template
  day             String         // weekday or weekend
  shift           String         // hr, min, day, location, shift
  pay             Int
  payroll         payroll        @relation(fields: [payrollId], references: [payrollid], onDelete: Cascade)
  template        typepayTemplate? @relation(fields: [templateId], references: [id], onDelete: SetNull, name: "TemplateTypePays")

  @@index([payrollId])
  @@index([templateId])
}

model attendance {
  id       String   @id @default(cuid())
  userId   String
  imageurl String
  time     DateTime
  location String
  eventId  String
  user     user     @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  event    event    @relation(fields: [eventId], references: [eventid], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
}

model files {
  id      String @id @default(cuid())
  eventId String
  url     String
  name    String
  event   event  @relation(fields: [eventId], references: [eventid], onDelete: Cascade)

  @@index([eventId])
}
model sharedfiles{
    id      String @id @default(cuid())
    orgId   String?
    url     String
    name    String
}

model Feature {
  id          String @id @default(cuid())
  title       String
  description String
  votes       Vote[] @relation("FeatureVotes")
}

model Vote {
  id        String  @id @default(cuid())
  userId    String
  featureId String
  feature   Feature @relation(fields: [featureId], references: [id], name: "FeatureVotes")

  @@unique([userId, featureId])
  @@index([featureId])
}

model board {
  id            String   @id @default(cuid())
  title         String
  orgId         String
  imageId       String
  imageThumbUrl String
  imageFullUrl  String
  username      String
  link          String
  list          List[]
  created       DateTime @default(now())
  update        DateTime @updatedAt
}

model List {
  id      String @id @default(cuid())
  title   String
  order   Int
  boardId String
  card    Card[]
  board   board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  @@index([boardId])
}

model Card {
  id          String   @id @default(cuid())
  title       String
  order       Int
  description String?
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  create      DateTime @default(now())
  update      DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum TYPE {
  board
  list
  card
}

model Audit {
  id        String   @id @default(cuid())
  orgId     String
  action    ACTION
  entity    String
  type      TYPE
  userId    String
  title     String
  userImage String
  username  String
  created   DateTime @default(now())
  update    DateTime @updatedAt
}

model Polling {
  id      String     @id @default(cuid())
  title   String
  images  Image[]
  orgId   String?
  userId  String
}

model Image {
  id      String  @id @default(cuid())
  url     String
  name    String
  votes   Int     @default(0)
  order   Int     @default(0)  // Order field to store the image position
  eventId String
  event   Polling @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}